    //
    //  ContentView.swift
    //  MyTimer
    //
    //  Created by Â§ßÊú¨Ë©©Áπî 
    //

    import SwiftUI

    struct ContentView: View {
        //Èü≥„ÇíÈ≥¥„Çâ„ÅôÁî®
        let soundPlayer = SoundPlayer()
        
        //„Çø„Ç§„Éû„Éº„ÅÆÂ§âÊï∞„Çí‰ΩúÊàê
        @State var timerHandler : Timer?
        //ÁµåÈÅéÊôÇÈñì„ÅÆÂ§âÊï∞„Çí‰ΩúÊàê
        @State var count = 0
        //Ë®≠ÂÆö„Åó„ÅüÊôÇÈñì„ÇíÂèñÂæó
        @AppStorage("timer_value") var timerValue = 180
        
        //Â†¥Èù¢Áî®„ÅÆÂ§âÊï∞
        @State var scene = 0
        
        @State var showAlert = false;
        
        var body: some View {
            NavigationStack{
                ZStack{
                    Image("backgroundPome")
                        .resizable()
                        .ignoresSafeArea()
                        .scaledToFill()
                    
                    if scene == 0 {
                        VStack{
                            Text("Á≠ã„Éà„É¨„Çí")
                                .font(.title)
                                .fontWeight(.semibold)
                            Text("Âßã„ÇÅ„Åæ„Åó„Çá„ÅÜ")
                                .font(.title)
                                .fontWeight(.semibold)
                                .padding(.bottom, 15.0)
                            Image("start")
                                .resizable()
                                .scaledToFit()
                            
                            Button{
                                scene = 1
                            }label:{
                                Text("Start")
                                    .font(.largeTitle)
                                    .frame(width: 300)
                                    .frame(height: 100)
                                    .background(Color(hue: 0.516, saturation: 0.179, brightness: 0.642, opacity: 0.733))
                                    .foregroundColor(Color.white)
                                    
                            }
                        }//VStackÁµÇ„Çè„Çä
                    }//scene == 0ÁµÇ„Çè„Çä
                    
                    else if scene == 1 {
                        
                            
                        VStack{
                            GIFView(gifName: "example")
                                .padding(.bottom)
                                .frame(width: 250.0, height: 300.0)
                                //.scaledToFit()
            
                            
                            if timerValue - count <= 60{
                                Text("ÊÆã„Çä\(timerValue - count)Áßí")
                                    .font(.largeTitle)
                            }
                            
                            else{
                                Text("ÊÆã„Çä\((timerValue - count)/60)ÂàÜ\((timerValue - count)%60)Áßí")
                                    .font(.largeTitle)
                            }
                            HStack{
                                Button{
                                    //„Éú„Çø„É≥„Çí„Çø„ÉÉ„Éó„Åó„ÅüÊôÇ„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥
                                    startTimer()
                                }label:{
                                    Text("„Çπ„Çø„Éº„Éà")
                                        .font(.title)
                                        .foregroundColor(.white)
                                        .frame(width: 140,height:140)
                                        .background(Color("startColor"))
                                        .clipShape(/*@START_MENU_TOKEN@*/Circle()/*@END_MENU_TOKEN@*/)
                                    
                                }
                                
                                Button{
                                    //„Éú„Çø„É≥„Çí„Çø„ÉÉ„Éó„Åó„ÅüÊôÇ„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥
                                    if let unwrapedTimerhandler  = timerHandler{
                                        if unwrapedTimerhandler.isValid == true{
                                            unwrapedTimerhandler.invalidate()
                                        }
                                    }
                                }label:{
                                    Text("„Çπ„Éà„ÉÉ„Éó")
                                        .font(.title)
                                        .foregroundColor(.white)
                                        .frame(width: 140,height:140)
                                        .background(Color("stopColor"))
                                        .clipShape(/*@START_MENU_TOKEN@*/Circle()/*@END_MENU_TOKEN@*/)
                                    
                                }
                               
                                
                            }//HStackÁµÇ„Çè„Çä
                        }//VStackÁµÇ„Çè„Çä
                    }//scene == 0 ÁµÇ„Çè„Çä
                    
                    else{
                        VStack{
                            ZStack{
                                Text("\(timerValue/60)ÂàÜ")
                                    .font(.largeTitle)
                                    .fontWeight(.semibold)
                                    .foregroundColor(Color(hue: 0.1, saturation: 0.257, brightness: 0.251))
                                    .padding(.vertical, 30.0)
                                    .padding(.horizontal, 50.0)
                                    .background(Color(hue: 0.105, saturation: 0.688, brightness: 0.883, opacity: 0.861))
                                
                                Image("frame")
                                    .resizable()
                                    .frame(width: 200.0, height: 130.0)
                                    .scaledToFit()
                            }
                            if timerValue <= 300{
                                Text("„ÇÑ„Çã„Å†„Åë„ÅßÂÅâ„ÅÑ„ÅßË≥û")
                                    .font(.headline)
                                    .padding(.top)
                                    .underline()
                                
                                Text("„Çà„Åë„Çå„Å∞„ÇÇ„ÅÜ„Å°„Çá„Å£„Å®„Å†„Åë")
                                Text("È†ëÂºµ„Å£„Å¶„Åø„Åæ„Åõ„Çì„Åã...?")
                                Image("neko1")
                                    .resizable()
                                    .scaledToFit()
                            }
                            else if timerValue <= 1200{
                                Text("È†ëÂºµ„Å£„Åü„ÅßË≥û")
                                    .font(.headline)
                                    .padding(.top)
                                    .underline()
                                
                                Text("„ÅÇ„Å™„Åü„ÅÆÁ≠ãËÇâ„Åå„Å°„Çá„Å≥„Å£„Å®")
                                Text("Â¢ó„Åà„Åæ„Åó„Åü„ÄÇÂÅâ„ÅÑ„ÄÇ")
                                Image("neko2")
                                    .resizable()
                                    .padding([.leading, .bottom, .trailing])
                                    .scaledToFit()
                            }
                            
                           
                            else if timerValue <= 1800{
                                Text("È†ëÂºµ„Çä„Åô„Åé„ÅßË≥û")
                                    .font(.headline)
                                    .padding(.top)
                                    .underline()
                                
                                Text("„ÅÇ„Å™„Åü„ÅÆÁ≠ãËÇâ„Åå„Åã„Å™„ÇäÊàêÈï∑„Åó„Åæ„Åó„Åü„ÄÇ")
                                Text("„ÅÇ„Å™„Åü„ÅÆÈ†ëÂºµ„Çä„Å´‰πæÊùØ„ÄÇ")
                             
                                Image("neko3")
                                    .resizable()
                                    .padding(.all)
                                    .frame(width: 250.0, height: 400.0)
                                    .scaledToFit()
                            }
                            else{
                                Text("„ÅÇ„Å™„Åü„ÅØÁ•û„ÅßË≥û")
                                    .font(.headline)
                                    .padding(.top)
                                    .underline()
                                
                                Text("„ÇÇ„ÅØ„ÇÑ‰Ωï„ÇÇË®Ä„ÅÜ„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
                                Text("ÁÑ°ÁêÜ„Åó„Åô„Åé„Å™„ÅÑ„Çà„ÅÜ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                             
                                Image("tassei")
                                    .resizable()
                                    .padding(.all)
                                    .scaledToFit()
                            }
                            
                            
                            
                            Button{
                                scene = 0
                            }label:{
                                Text("üå∏„Çπ„Çø„Éº„ÉàÁîªÈù¢„Å∏üå∏")
                                    .font(.headline)
                                    .padding()
                                    .frame(width: 200)
                                    .frame(height: 60)
                                    .background(Color(hue: 0.516, saturation: 0.179, brightness: 0.642, opacity: 0.733))
                                    .foregroundColor(Color.white)
                                    
                            }
                        }
                    }//scene == 2ÁµÇ„Çè„Çä
                }//ZStackÁµÇ„Çè„Çä
                
                //ÊôÇÈñìË®≠ÂÆö„Åó„Åü„ÇâÁîªÈù¢„ÇíÊõ¥Êñ∞
                .onAppear{
                    count = 0
                }
                //„Éú„Çø„É≥„ÇíËøΩÂä†
                .toolbar{
                    //Âè≥„Å´ÈÖçÁΩÆ
                    ToolbarItem(placement: .navigationBarTrailing){
                        NavigationLink{//ÈÅ∑Áßª
                            SettingView()
                        }label: {
                            Text("ÊôÇÈñìË®≠ÂÆö")
                        }
                    }
                }
                
                //showAlert„Ååtrue„ÅÆÊôÇ
                .alert("ÈÅîÊàê",isPresented: $showAlert){
                    Button{
                        //„Éú„Çø„É≥„Åå„Çø„ÉÉ„Éó„Åï„Çå„ÅüÊôÇ„Å´ÂÆüË°å
                        soundPlayer.cymbalPlay()
                        scene = 2
                        
                    }label: {
                        Text("‰ªäÊó•„ÅÆÊàêÊûú„ÅØÔºü")
                    }
                }
                message:{
                    Text("„Çà„ÅèÈ†ëÂºµ„Çä„Åæ„Åó„ÅüÔºÅ")
                        
                }
                
                
            }
            
            
        }
        
        //1Áßí„Åî„Å®„Å´ÂÆüË°å„Åï„Çå„Å¶„Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥„Åô„Çã
        func countDownTimer(){
            count += 1
            if timerValue - count <= 0{
                //„Çø„Ç§„Éû„ÉºÂÅúÊ≠¢
                timerHandler?.invalidate()
                
                //„Ç¢„É©„Éº„ÉàË°®Á§∫
                showAlert = true
                
            }
        }
        
        //„Çø„Ç§„Éû„Éº„ÅÆ„Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥ÈñãÂßã
        func startTimer(){
            if let unwrapedTimerHandler = timerHandler{
                //„ÇÇ„Åó„Çø„Ç§„Éû„Éº„ÅåÂÆüË°å‰∏≠„Å™„Çâ„Çπ„Çø„Éº„Éà„Åó„Å™„ÅÑ
                if unwrapedTimerHandler.isValid == true{
                    return
                }
            }
            
            if timerValue - count <= 0{
                count = 0
            }
            
            //„Çø„Ç§„Éû„Éº„Çπ„Çø„Éº„Éà
            timerHandler = Timer.scheduledTimer(withTimeInterval: 1, repeats: true){ _ in
                countDownTimer()
            }
        }
    }

    struct ContentView_Previews: PreviewProvider {
        static var previews: some View {
            ContentView()
        }
    }
